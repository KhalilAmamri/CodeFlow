# ============================================================================
# ALEMBIC CONFIGURATION FILE
# ============================================================================
# This file configures Alembic for database migrations in the Pythonic Flask app
# It contains settings for logging, migration generation, and database operations

# A generic, single database configuration for Flask applications.

[alembic]
# Template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# Set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false


# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

[loggers]
# Define available logger components
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
# Define output handlers for log messages
keys = console

[formatters]
# Define log message formatting
keys = generic

# ============================================================================
# LOGGER CONFIGURATIONS
# ============================================================================

[logger_root]
# Root logger configuration - controls overall logging behavior
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
# SQLAlchemy engine logging - database query and connection logging
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
# Alembic migration logging - migration operation logging
level = INFO
handlers =
qualname = alembic

[logger_flask_migrate]
# Flask-Migrate logging - Flask integration logging
level = INFO
handlers =
qualname = flask_migrate

# ============================================================================
# HANDLER AND FORMATTER CONFIGURATIONS
# ============================================================================

[handler_console]
# Console output handler for log messages
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
# Generic log message formatting
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
